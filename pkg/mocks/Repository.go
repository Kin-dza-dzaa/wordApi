// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Kin-dza-dzaa/wordApi/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddWords provides a mock function with given fields: ctx, words, badwords, userId
func (_m *Repository) AddWords(ctx context.Context, words models.WordsToAdd, badwords map[string]string, userId string) error {
	ret := _m.Called(ctx, words, badwords, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WordsToAdd, map[string]string, string) error); ok {
		r0 = rf(ctx, words, badwords, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWords provides a mock function with given fields: ctx, words, userId
func (_m *Repository) DeleteWords(ctx context.Context, words models.WordsToDelete, userId string) error {
	ret := _m.Called(ctx, words, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WordsToDelete, string) error); ok {
		r0 = rf(ctx, words, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWords provides a mock function with given fields: ctx, words, userId
func (_m *Repository) GetWords(ctx context.Context, words models.Words, userId string) error {
	ret := _m.Called(ctx, words, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Words, string) error); ok {
		r0 = rf(ctx, words, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IfUserHasWord provides a mock function with given fields: ctx, word, collectionName, result, userId
func (_m *Repository) IfUserHasWord(ctx context.Context, word string, collectionName string, result *bool, userId string) error {
	ret := _m.Called(ctx, word, collectionName, result, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *bool, string) error); ok {
		r0 = rf(ctx, word, collectionName, result, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IfWordInDb provides a mock function with given fields: ctx, word, result
func (_m *Repository) IfWordInDb(ctx context.Context, word string, result *bool) error {
	ret := _m.Called(ctx, word, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *bool) error); ok {
		r0 = rf(ctx, word, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateState provides a mock function with given fields: ctx, words, userId
func (_m *Repository) UpdateState(ctx context.Context, words models.StatesToUpdate, userId string) error {
	ret := _m.Called(ctx, words, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.StatesToUpdate, string) error); ok {
		r0 = rf(ctx, words, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWord provides a mock function with given fields: ctx, words, userId
func (_m *Repository) UpdateWord(ctx context.Context, words models.WordToUpdate, userId string) error {
	ret := _m.Called(ctx, words, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WordToUpdate, string) error); ok {
		r0 = rf(ctx, words, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
