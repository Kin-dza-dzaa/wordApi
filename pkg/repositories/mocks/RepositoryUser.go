// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Kin-dza-dzaa/wordApi/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryUser is an autogenerated mock type for the RepositoryUser type
type RepositoryUser struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: user
func (_m *RepositoryUser) GetUser(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUpUser provides a mock function with given fields: user
func (_m *RepositoryUser) SignUpUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositoryUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryUser creates a new instance of RepositoryUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryUser(t mockConstructorTestingTNewRepositoryUser) *RepositoryUser {
	mock := &RepositoryUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
