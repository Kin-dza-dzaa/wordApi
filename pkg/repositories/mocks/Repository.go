// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Kin-dza-dzaa/wordApi/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddWords provides a mock function with given fields: words, userId
func (_m *Repository) AddWords(words *models.WordsToAdd, userId string) []string {
	ret := _m.Called(words, userId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*models.WordsToAdd, string) []string); ok {
		r0 = rf(words, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteWords provides a mock function with given fields: words, userId
func (_m *Repository) DeleteWords(words *models.WordsToDelete, userId string) {
	_m.Called(words, userId)
}

// GetWords provides a mock function with given fields: userId
func (_m *Repository) GetWords(userId string) (*models.WordsGet, error) {
	ret := _m.Called(userId)

	var r0 *models.WordsGet
	if rf, ok := ret.Get(0).(func(string) *models.WordsGet); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WordsGet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateState provides a mock function with given fields: words, userId
func (_m *Repository) UpdateState(words *models.StatesToUpdate, userId string) {
	_m.Called(words, userId)
}

// UpdateWord provides a mock function with given fields: words, userId
func (_m *Repository) UpdateWord(words *models.WordToUpdate, userId string) error {
	ret := _m.Called(words, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WordToUpdate, string) error); ok {
		r0 = rf(words, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
